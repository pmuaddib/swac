// Code generated by github.com/swaggest/swac v0.1.4, DO NOT EDIT.

package uspto

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"net/url"
)

// GetDatasetVersionFieldsRequest is operation request value.
type GetDatasetVersionFieldsRequest struct {
	// Dataset is a required `dataset` parameter in path.
	// Name of the dataset.
	Dataset string
	// Version is a required `version` parameter in path.
	// Version of the dataset.
	Version string
}

// encode creates *http.Request for request data.
func (request *GetDatasetVersionFieldsRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestURI := baseURL + "/" + url.PathEscape(request.Dataset) + "/" + url.PathEscape(request.Version) + "/fields"

	req, err := http.NewRequest(http.MethodGet, requestURI, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")

	req = req.WithContext(ctx)

	return req, err
}

// GetDatasetVersionFieldsResponse is operation response value.
type GetDatasetVersionFieldsResponse struct {
	StatusCode    int
	ValueOK       string  // ValueOK is a value of 200 OK response.
	ValueNotFound string  // ValueNotFound is a value of 404 Not Found response.
}

// decode loads data from *http.Response.
func (result *GetDatasetVersionFieldsResponse) decode(resp *http.Response) error {
	result.StatusCode = resp.StatusCode
	switch resp.StatusCode {
	case http.StatusOK:
		err := json.NewDecoder(resp.Body).Decode(&result.ValueOK)
		if err != nil {
			return err
		}
	case http.StatusNotFound:
		err := json.NewDecoder(resp.Body).Decode(&result.ValueNotFound)
		if err != nil {
			return err
		}
	default:
		return errors.New("unexpected response status: " + resp.Status)
	}

	return nil
}

// GetDatasetVersionFields performs REST operation.
func (c *Client) GetDatasetVersionFields(ctx context.Context, request GetDatasetVersionFieldsRequest) (GetDatasetVersionFieldsResponse, error) {
	result := GetDatasetVersionFieldsResponse{}
	ctx = context.WithValue(ctx, "restOperationPath", "/{dataset}/{version}/fields")
	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)
		defer cancel()
	}
	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
		return result, err
	}
	resp, err := c.transport.RoundTrip(req)

	if err != nil {
		return result, err
	}
	defer resp.Body.Close()
	err = result.decode(resp)
	if err != nil {
		return result, err
	}
	return result, nil
}
